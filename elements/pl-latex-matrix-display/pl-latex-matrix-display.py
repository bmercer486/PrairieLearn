import prairielearn as pl
import lxml.html
import numpy as np
import chevron


def prepare(element_html, element_index, data):
    element = lxml.html.fragment_fromstring(element_html)
    pl.check_attribs(element, required_attribs=[], optional_attribs=[])


def render(element_html, element_index, data):
    element = lxml.html.fragment_fromstring(element_html)

    latex_data = ''

    for child in element:

        if child.tag == 'variable':
            # Raise exception of variable does not have a name
            pl.check_attribs(child, required_attribs=['params_name'], optional_attribs=['digits', 'presentation_type'])

            # Get name of variable
            var_name = pl.get_string_attrib(child, 'params_name')

            # Get value of variable, raising exception if variable does not exist
            var_data = data['params'].get(var_name, None)
            if var_data is None:
                raise Exception('No value in data["params"] for variable %s in pl-latex-matrix-display element' % var_name)

            # Get the number of digits to output
            digits = pl.get_integer_attrib(child, 'digits', 2)
            # Get the presentation type
            presentation_type = pl.get_string_attrib(child, 'presentation_type', 'f')

            # If the variable is in a format generated by pl.to_json, convert it
            # back to a standard type (otherwise, do nothing)
            var_data = pl.from_json(var_data)

            if np.isscalar(var_data):
                raise Exception('Value in data["params"] for variable %s in pl-latex-matrix-display element must be an 1D or 2D array' % var_name)
            else:
                # Wrap the variable in an ndarray (if it's already one, this does nothing)
                var_data = np.array(var_data)
                # Check shape of variable
                if var_data.ndim > 2:
                    raise Exception('Value in data["params"] for variable %s in pl-latex-matrix-display element must be an 1D or 2D array' % var_name)
                # Create prefix/suffix so python string is np.array( ... )

            # Create string for latex matrix format
            latex_data += pl.inner_html(child)
            latex_data += '$' + pl.latex_array_from_numpy_array(var_data, presentation_type=presentation_type, digits=digits) + '$'

    html_params = {
        'latex_data': latex_data,
        'element_index': element_index,
        'uuid': pl.get_uuid()
    }

    with open('pl-latex-matrix-display.mustache', 'r', encoding='utf-8') as f:
        html = chevron.render(f, html_params).strip()

    return html
