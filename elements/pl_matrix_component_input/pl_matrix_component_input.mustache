

{{#question}}
<script>
    $(function() {
        $('#pl-matrix-components-input-{{uuid}} [data-toggle="popover"]').popover({
            container: 'body',
            template: '<div class="popover pl-matrix-components-input-popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',
        });
    });
</script>
<div id="pl-matrix-components-input-{{uuid}}" class="input-group">
    <span class="input-group-prepend">
        {{#label}}<label class="input-group-text" id="basic-addon2">{{label}}</label>{{/label}}
    </span>
    {{{input_array}}}
    <div class="input-group-append">
        <a class="btn btn-light border" role="button" data-toggle="popover" data-html="true" title="Matrix" data-content="{{info}}" data-placement="auto" data-trigger="focus" tabindex="0">
            <i class="fa fa-question-circle" aria-hidden="true"></i>
            {{#correct}}&nbsp;<span class="badge badge-success"><i class="fa fa-check" aria-hidden="true"></i> 100%</span>{{/correct}}
            {{#partial}}&nbsp;<span class="badge badge-warning"><i class="fa fa-circle-o" aria-hidden="true"></i> {{partial}}%</span>{{/partial}}
            {{#incorrect}}&nbsp;<span class="badge badge-danger"><i class="fa fa-times" aria-hidden="true"></i> 0%</span>{{/incorrect}}

        </a>
    </div>
</div>
{{/question}}

{{#submission}}
{{#parse_error}}
<script>
    $(function(){
        $('#pl-matrix-component-input-submission-{{uuid}} [data-toggle="popover"]').popover({
            container: 'body',
            template: '<div class="popover pl-matrix-component-input-popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',
        });
    });
</script>
<span id="pl-matrix-component-input-submission-{{uuid}}">
    {{#label}}<span>{{label}}</span>{{/label}}
    <a class="btn btn-secondary btn-sm" role="button" data-placement="auto" data-trigger="focus" data-toggle="popover" data-html="true" title="Error" tabindex="0" data-content="{{parse_error}}{{#raw_submitted_answer}}<hr><h5><small class='text-uppercase'>What you submitted</small></h5><pre>{{raw_submitted_answer}}</pre>{{/raw_submitted_answer}}">INVALID
      <span><i class="fa fa-question-circle" aria-hidden="true"></i></span>
    </a>
</span>
{{/parse_error}}
{{^parse_error}}
{{#label}}<span>{{label}}</span>{{/label}}
<samp>{{a_sub}}</samp>
{{#correct}}<span class="badge badge-success"><i class="fa fa-check" aria-hidden="true"></i> 100%</span>{{/correct}}
{{#partial}}<span class="badge badge-warning"><i class="fa fa-circle-o" aria-hidden="true"></i> {{partial}}%</span>{{/partial}}
{{#incorrect}}<span class="badge badge-danger"><i class="fa fa-times" aria-hidden="true"></i> 0%</span>{{/incorrect}}
{{/parse_error}}
{{/submission}}

{{#answer}}
<div id="pl-matrix-component-input-answer-{{uuid}}">
         {{#default_is_python}}
                <p>
                    {{#label}}<span>{{label}}</span>{{/label}}
                    <samp id="python-data-{{element_index}}">{{python_data}}</samp>
                </p>
        {{/default_is_python}}
        {{#default_is_latex}}
               <p>
                   {{#label}}<span>{{label}}</span>{{/label}}
                   <samp id="latex-data-{{element_index}}">{{latex_data}}</samp>
               </p>
       {{/default_is_latex}}
</div>
{{/answer}}


{{#format}}
<p>
Your must enter all the components of the matrix.
</p>
<p>
{{#allow_complex}}
Each entry must be either a real number between <code>-1e308</code> and <code>1e308</code> or a complex number with both real and imaginary parts between <code>-1e308</code> and <code>1e308</code> (i.e., it must be interpretable as a double-precision real or complex number). Complex numbers must use either <code>i</code> or <code>j</code> as the imaginary unit, must place the imaginary unit after the imaginary part (e.g., <code>2j</code> not <code>j2</code>), must write the imaginary part even when <code>1</code> or <code>-1</code> (e.g., <code>1j</code> not <code>j</code>), and must write the real part before the imaginary part (e.g., <code>1+2j</code> not <code>2j+1</code>). Standard python print format is accepted for complex numbers (e.g., <code>(1+2j)</code>).
{{/allow_complex}}
{{^allow_complex}}
Each entry must be a real number between <code>-1e308</code> and <code>1e308</code> (i.e., it must be interpretable as a double-precision floating-point number).
{{/allow_complex}}
No symbolic expressions (those that involve fractions, square roots, variables, etc.) will be accepted. Scientific notation is accepted (e.g., <code>1.2e03</code>).
</p>
<p>
{{#relabs}}Numbers must be accurate to within relative tolerance <code>{{rtol}}</code> and absolute tolerance <code>{{atol}}</code>.{{/relabs}}
{{#sigfig}}Numbers must be accurate to {{digits}} significant figures. This means (for example) that if the true answer is <code>1.234</code>, then the submitted answer must be between <code>1.234 - {{comparison_eps}}</code> and <code>1.234 + {{comparison_eps}}</code> to be counted correct.{{/sigfig}}
{{#decdig}}Numbers must be accurate to {{digits}} digits after the decimal. This means (for example) that if the true answer is <code>1.234</code>, then the submitted answer must be between <code>1.234 - {{comparison_eps}}</code> and <code>1.234 + {{comparison_eps}}</code> to be counted correct.{{/decdig}}
</p>
{{/format}}

{{#shortformat}}
{{#relabs}}(rtol={{rtol}}, atol={{atol}}){{/relabs}}{{#sigfig}}({{digits}} significant figures){{/sigfig}}{{#decdig}}({{digits}} digits after decimal){{/decdig}}
{{/shortformat}}
